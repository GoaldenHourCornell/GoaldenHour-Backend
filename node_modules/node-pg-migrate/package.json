{
  "name": "node-pg-migrate",
  "description": "Node.js database migration management for Postgresql",
  "author": {
    "name": "Theo Ephraim"
  },
  "bin": {
    "pg-migrate": "bin/pg-migrate"
  },
  "keywords": [
    "db",
    "database",
    "migrate",
    "migration",
    "migrations",
    "pg",
    "postgres",
    "postgresql"
  ],
  "version": "0.0.5",
  "engines": {
    "node": ">=0.6.0"
  },
  "bugs": {
    "url": "https://github.com/theoephraim/node-pg-migrate/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/theoephraim/node-pg-migrate.git"
  },
  "dependencies": {
    "mkdirp": "~0.3.4",
    "optimist": "~0.3.7",
    "pkginfo": "~0.3.0",
    "lodash": "~2.4.1",
    "step": "0.0.5",
    "async": "^0.2.10"
  },
  "devDependencies": {
    "pg": "~1.0.0"
  },
  "scripts": {},
  "readme": "# pg-migrate\n\nNode.js database migration management built exclusively for postgres.\n\n## Installation\n\n    $ npm install node-pg-migrate\n\nInstalling this module adds a runnable file into your `node_modules/.bin` directory. If installed globally (with the -g option), you can run `pg-migrate` and if not, you can run `./node_modules/.bin/pg-migrate`\n\n## Usage\n\nYou must specify your database connection url by setting the environment variable `DATABASE_URL`.\n\nDepending on your project's setup, it may make sense to write some custom grunt tasks that set this env var and run your migration commands. More on that below.\n\n**The following are the available commands:**\n\n- `pg-migrate create {migration-name}` - creates a new migration file with the name you give it. Spaces and underscores will be replaced by dashes and a timestamp is prepended to your file name.\n- `pg-migrate up` - run all up migrations from the current state\n- `pg-migrate up {N}` - run N up migrations from the current position\n- `pg-migrate down` - run a single down migration\n- `pg-migrate down {N}` - run N down migrations from the current state\n\n## Defining Migrations\n\nWhen you run `pg-migrate create` a new migration file is created that looks like this:\n\n```javascript\nexports.up = function(pgm, run){\n  run();\n}\nexports.down = function(pgm, run){\n  run();\n}\n```\n\n`pgm` is a helper object that provides migration operations and `run` is the callback to call when you are done.\n\n**IMPORTANT**\nGeneration of the up and down block is asynchronous, but each individal operation is not. Calling the migration functions on `pgm` doesn't actually migrate your database. These functions just add sql commands to a stack that is run after you call the callback.\n\n#### Automatic Down Migrations\n\nIf `exports.down` is not present in a migration, pg-migrate will try to automatically infer the operations that make up the down migration by reversing the operations of the up migration. Only some operations have automatically inferrable equivalents (details below on each operation). Sometimes, migrations are destructive and cannot be rolled back. In this case, you can set `exports.down = false` to tell pg-migrate that the down migration is impossible.\n\n\n\n## Migration methods\n\nThe `pgm` object that is passed to each up/down block has many different operations available. Each operation is simply a function that generates some sql and stores it in the current pgm context.\n\nBy default, each migration will be run in a transaction. To disable transactions for a specific migration, call `pgm.noTransaction()`\nThis is required for some SQL operations that cannot be run within a transaction. It should be used carefully.\n\n### Creating & Altering Tables / Columns\n\n#### `pgm.createTable( tablename, columns, options )`\n\n> Create a new table - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-createtable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name for the new table\n- `columns` _[object]_ - column names / options -- see [column definitions section](#column-definitions)\n- `options` _[object]_ - table options (optional)\n  - `inherits` _[string]_ - table to inherit from\n\n**Reverse Operation:** `dropTable`\n\n-----------------------------------------------------\n\n#### `pgm.dropTable( tablename )`\n\n> Drop existing table - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-droptable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to drop\n\n-----------------------------------------------------\n\n#### `pgm.renameTable( tablename, new_tablename )`\n\n> Rename a table - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to rename\n- `new_table` _[object]_ - new name of the table\n\n**Reverse Operation:** same operation in opposite direction\n\n-----------------------------------------------------\n\n#### `pgm.addColumns( tablename, new_columns )`\n\n> Add columns to an existing table - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `new_columns` _[object]_ - column names / options -- see [column definitions section](#column-definitions)\n\n**Aliases:** `addColumn`\n**Reverse Operation:** `dropColumns`\n\n-----------------------------------------------------\n\n#### `pgm.dropColumns( tablename, columns )`\n\n> Drop columns from a table - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `columns` _[array of strings or object]_ - columns to drop (if object, uses keys)\n\n**Aliases:** `dropColumn`\n\n-----------------------------------------------------\n\n#### `pgm.renameColumn( tablename, old_column_name, new_column_name )`\n\n> Rename a column - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `old_column_name` _[string]_ - current column name\n- `new_column_name` _[string]_ - new column name\n\n**Reverse Operation:** same operation in opposite direction\n\n-----------------------------------------------------\n\n#### `pgm.alterColumn( tablename, column_name, column_options )`\n\n> Alter a column (default value, type, allow null) - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `column_name` _[string]_ - column to alter\n- `column_options` _[object]_ - optional new column options\n  - `default` _[string or null]_ - null, string\n  - `type` _[string]_ - new datatype\n  - `notNull` _[boolean]_ - sets NOT NULL if true\n\n-----------------------------------------------------\n\n#### `pgm.addConstraint( tablename, constraint_name, expression )`\n\n> Add a named column constraint - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `constraint_name` _[string]_ - name for the constraint\n- `expression` _[string]_ - constraint expression (raw sql)\n\n**Aliases:** `createConstraint`\n**Reverse Operation:** `dropConstraint`\n\n-----------------------------------------------------\n\n#### `pgm.dropConstraint( tablename, constraint_name )`\n\n> Drop a named column constraint - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-altertable.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `constraint_name` _[string]_ - name for the constraint\n\n-----------------------------------------------------\n\n#### `pgm.createIndex( tablename, columns, options )`\n\n> Create a new index - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-createindex.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `columns` _[string or array of strings]_ - columns to add to the index\n- `options` _[index options]_ - optional options:\n  - `name` _[string]_ - name for the index (one will be inferred from table/columns if undefined)\n  - `unique` _[boolean]_ - set to true if this is a unique index\n  - `where` _[string]_ - raw sql for where clause of index\n  - `concurrently` _[boolean]_ - create this index concurrently\n  - `method` _[string]_ - btree | hash | gist | spgist | gin\n\n**Aliases:** `addIndex`\n**Reverse Operation:** `dropIndex`\n\n-----------------------------------------------------\n\n#### `pgm.dropIndex( tablename, columns, options )`\n\n> Drop an index - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-dropindex.html)\n\n**Arguments:**\n- `tablename` _[string]_ - name of the table to alter\n- `columns` _[string or array of strings]_ - column names, used only to infer an index name\n- `options` _[index options]_ - optional options:\n  - `name` _[string]_ - name of the index to drop\n\n-----------------------------------------------------\n\n### Miscellaneous Operations\n\n#### `pgm.sql( sql )`\n\n> Run raw sql -- with some optional _[very basic](http://mir.aculo.us/2011/03/09/little-helpers-a-tweet-sized-javascript-templating-engine/)_ mustache templating\n\n**Arguments:**\n- `sql` _[string]_ - name(s) of extensions to install\n- `args` _[object]_ - (optional) key/val of arguments to replace\n\n**Aliases:** `addExtension`\n**Reverse Operation:** `dropExtension`\n\n-----------------------------------------------------\n\n#### `pgm.createExtension( extension )`\n\n> Install postgres extension(s) - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-createextension.html.html)\n\n**Arguments:**\n- `extension` _[string or array of strings]_ - name(s) of extensions to install\n\n**Aliases:** `addExtension`\n**Reverse Operation:** `dropExtension`\n\n-----------------------------------------------------\n\n#### `pgm.dropExtension( extension )`\n\n> Un-install postgres extension(s) - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-dropextension.html)\n\n**Arguments:**\n- `extension` _[string or array of strings]_ - name(s) of extensions to install\n\n-----------------------------------------------------\n\n#### `pgm.createType( type_name, values )`\n\n> Create a new enum data type - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-createtype.html)\n\n**Arguments:**\n- `type_name` _[string]_ - name of the new type\n- `values` _[array of strings]_ - possible values\n\n**Aliases:** `addType`\n**Reverse Operation:** `dropType`\n\n-----------------------------------------------------\n\n#### `pgm.dropType( type_name )`\n\n> Drop a custom data type - [postgres docs](http://www.postgresql.org/docs/9.3/static/sql-droptype.html)\n\n**Arguments:**\n- `type_name` _[string]_ - name of the new type\n\n-----------------------------------------------------\n\n### Column Definitions\n\nThe `createTable` and `addColumns` methods both take a `columns` argument that specifies column names and options. It is a object (key/value) where each key is the name of the column, and the value is another object that defines the options for the column.\n\n- `type` _[string]_ - data type (use normal postgres types)\n- `unique` _[boolean]_ - set to true to add a unique constraint on this column\n- `primaryKey` _[boolean]_ - set to true to make this column the primary key\n- `notNull` _[boolean]_ - set to true to make this column not null\n- `check` _[string]_ - sql for a check constraint for this column\n- `references` _[string]_ - a table name that this column is a foreign key to\n\n#### Data types & Convenience Shorthand\nData type strings will be passed through directly to postgres, so write types as you would if you were writing the queries by hand.\n\n**There are some aliases on types to make things more foolproof:**\n_(int, string, float, double, datetime, bool)_\n\n**There is a shorthand to pass only the type instead of an options object:**\n`pgm.addColumns('myTable', { age: 'integer' });`\nis equivalent to\n`pgm.addColumns('myTable', { age: { type: 'integer' } });`\n\n**There is a shorthand for normal auto-increment IDs:**\n`pgm.addColumns('myTable', { id: 'id' });`\nis equivalent to\n`pgm.addColumns('myTable', { id: { type: 'serial', primaryKey: true } });`\n\n\n\n\n\n## Explanation & Goals\n\n*Why only Postgres?* - By writing this migration tool specifically for postgres instead of accommadating many databases, we can actually provide a full featured tool that is much simpler to use and maintain. I was tired of using crippled database tools just in case one day we switch our database.\n\n*Async / Sync* - Everything is async in node, and that's great, but a migration tool should really just be a fancy wrapper that generates SQL. Most other migration tools force you to bring in control flow libraries or wrap everything in callbacks as soon as you want to do more than a single operation in a migration. Plus by building up a stack of operations, we can automatically infer down migrations (sometimes) to save even more time.\n\n*Naming / Raw Sql* - Many tools force you to use their constants to do things like specify data types. Again, this tool should be a fancy wrapper that generates SQL, so whenever possible, it should just pass through user values directly to the SQL. The hard part is remembering the syntax of the specific operation, not remembering how to type \"timestamp\"!\n",
  "readmeFilename": "README.md",
  "_id": "node-pg-migrate@0.0.5",
  "dist": {
    "shasum": "993a020c753c39266bc055c42ef93cbcba49a890"
  },
  "_from": "node-pg-migrate@",
  "_resolved": "https://registry.npmjs.org/node-pg-migrate/-/node-pg-migrate-0.0.5.tgz"
}
